X1 <- rbinom(npilot, size = 1, prob = prop_tested_subtype)
X2 <- rnorm(npilot)
failureFlag <- rbinom(npilot, size =1, prob = prop_died)
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
}
cur_power <- mean(rand_power)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
theta = theta,
power = cur_power))
}
}
}
power_mat
power_mat[which(power_mat$power>0.78),]
which_first <- function(x){ return(x[1])}
power_mat[which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78),]
collect_res <- c()
power_mat[which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
collect_res <- rbind(correct_res,
power_mat[which(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78),])
}
}
for (n_baseline in n_baseline_vec){
collect_res <- rbind(collect_res,
power_mat[which(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78),])
}
collect_res <- c()
power_mat[which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
collect_res <- rbind(collect_res,
power_mat[which(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78),])
}
}
collect_res <- c()
power_mat[which_first(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78),])
}
}
power_mat
collect_res
power_mat[which_first(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78),]
which_first(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)
which_first <- function(x){ return(x[1])}
which_first(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)
which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)
which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78) -> x
x[1]
power_mat[which_first(which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
collect_res <- c()
power_mat[which_first(which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(which(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78)),])
}
}
collect_res
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (theta in theta_vec){
rand_power <- rep(NA, 10)
for (i in 1:10){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
X1 <- rbinom(npilot, size = 1, prob = prop_tested_subtype)
X2 <- rnorm(npilot)
failureFlag <- rbinom(npilot, size =X1, prob = prop_died)
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
}
cur_power <- mean(rand_power)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
theta = theta,
power = cur_power))
}
}
}
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (theta in theta_vec){
rand_power <- rep(NA, 10)
for (i in 1:10){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
X1 <- rbinom(npilot, size = 1, prob = prop_tested_subtype)
X2 <- rnorm(npilot)
failureFlag <- rbinom(npilot, size =X1, prob = prop_died)
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
}
cur_power <- mean(rand_power)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
theta = theta,
power = cur_power))
}
}
}
collect_res <- c()
power_mat[which_first(which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(which(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78)),])
}
}
collect_res
failureFlag
for (n_tested in n_tested_vec){
power_mat <- c()
for (n_tested in n_tested_vec){
for (theta in theta_vec){
rand_power <- rep(NA, 10)
for (i in 1:10){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
n_tested_pilot <- round(npilot*prop_tested_subtype)
X1 <- c(rep(1,n_tested_pilot), rep(0, n_pilot - n_tested_pilot))
X2 <- rnorm(npilot)
failureFlag <- c(rbinom(n_tested_pilot, size =1, prob = prop_died+0.1),
rbinom(n_pilot - n_tested_pilot, size =1, prob = (prop_died*n_pilot - n_tested_pilot*(prop_died+0.1))/(n_pilot - n_tested_pilot))
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
for (n_tested in n_tested_vec){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
n_tested_pilot <- round(npilot*prop_tested_subtype)
X1 <- c(rep(1,n_tested_pilot), rep(0, n_pilot - n_tested_pilot))
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
n_tested_pilot <- round(npilot*prop_tested_subtype)
X1 <- c(rep(1,n_tested_pilot), rep(0, npilot - n_tested_pilot))
X2 <- rnorm(npilot)
failureFlag <- c(rbinom(n_tested_pilot, size =1, prob = prop_died+0.1),
rbinom(npilot - n_tested_pilot, size =1, prob = (prop_died*n_pilot - n_tested_pilot*(prop_died+0.1))/(npilot - n_tested_pilot))
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
rbinom(n_tested_pilot, size =1, prob = prop_died+0.1)
npilot - n_tested_pilot
prop_died*n_pilot
prop_died*npilot
n_tested_pilot*(prop_died+0.1
(prop_died*npilot - n_tested_pilot*(prop_died+0.1))
(npilot - n_tested_pilot)
rbinom(npilot - n_tested_pilot, size =1, prob = (prop_died*npilot - n_tested_pilot*(prop_died+0.1))/(npilot - n_tested_pilot)
failureFlag <- c(rbinom(n_tested_pilot, size =1, prob = prop_died+0.1),
rbinom(npilot - n_tested_pilot, size =1, prob = (prop_died*npilot - n_tested_pilot*(prop_died+0.1))/(npilot - n_tested_pilot)))
mean(failureFlag)
failureFlag <- c(rbinom(n_tested_pilot, size =1, prob = prop_died+0.1),
rbinom(npilot - n_tested_pilot, size =1, prob = (prop_died*npilot - n_tested_pilot*(prop_died+0.1))/(npilot - n_tested_pilot)))
mean(failureFlag)
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (theta in theta_vec){
rand_power <- rep(NA, 10)
for (i in 1:10){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
n_tested_pilot <- round(npilot*prop_tested_subtype)
X1 <- c(rep(1,n_tested_pilot), rep(0, npilot - n_tested_pilot))
X2 <- rnorm(npilot)
failureFlag <- c(rbinom(n_tested_pilot, size =1, prob = prop_died+0.1),
rbinom(npilot - n_tested_pilot, size =1, prob = (prop_died*npilot - n_tested_pilot*(prop_died+0.1))/(npilot - n_tested_pilot)))
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
}
cur_power <- mean(rand_power)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
theta = theta,
power = cur_power))
}
}
}
collect_res <- c()
power_mat[which_first(which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(which(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78)),])
}
}
collect_res
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (theta in theta_vec){
rand_power <- rep(NA, 10)
for (i in 1:10){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
n_tested_pilot <- round(npilot*prop_tested_subtype)
X1 <- c(rep(1,n_tested_pilot), rep(0, npilot - n_tested_pilot))
X2 <- rnorm(npilot)
failureFlag <- c(rbinom(n_tested_pilot, size =1, prob = prop_died+0.15),
rbinom(npilot - n_tested_pilot, size =1, prob = (prop_died*npilot - n_tested_pilot*(prop_died+0.15))/(npilot - n_tested_pilot)))
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
}
cur_power <- mean(rand_power)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
theta = theta,
power = cur_power))
}
}
}
collect_res <- c()
power_mat[which_first(which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(which(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78)),])
}
}
collect_res
n_tested_vec <- c(50, 100, 150, 200)
n_baseline_vec <- c(500, 700, 1000)
theta_vec <- seq(1, 4, by = 0.05)
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (theta in theta_vec){
rand_power <- rep(NA, 10)
for (i in 1:10){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
X1 <- rbinom(npilot, size = 1, prob = prop_tested_subtype)
X2 <- rnorm(npilot)
failureFlag <- rbinom(npilot, size =1, prob = prop_died)
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
}
cur_power <- mean(rand_power)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
theta = theta,
power = cur_power))
}
}
}
which_first <- function(x){ return(x[1])}
collect_res <- c()
power_mat[which_first(which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(which(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78)),])
}
}
collect_res
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (theta in theta_vec){
rand_power <- rep(NA, 10)
for (i in 1:10){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
X1 <- rbinom(npilot, size = 1, prob = prop_tested_subtype)
X2 <- rnorm(npilot)
failureFlag <- rbinom(npilot, size =1, prob = prop_died)
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
}
cur_power <- mean(rand_power)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
theta = theta,
power = cur_power))
}
}
}
which_first <- function(x){ return(x[1])}
collect_res <- c()
power_mat[which_first(which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(which(power_mat$n_tested == n_tested & power_mat$n_baseline == n_baseline & power_mat$power>0.78)),])
}
}
collect_res
n_tested_vec <- c(100, 150, 200, 300)
n_baseline_vec <- c(500, 700, 1000)
theta_vec <- seq(1, 4, by = 0.05)
pval_vec <- c(0.05/3, 0.05/4, 0.05/5)
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (theta in theta_vec){
for (pval in pval_vec){
rand_power <- rep(NA, 10)
for (i in 1:10){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
X1 <- rbinom(npilot, size = 1, prob = prop_tested_subtype)
X2 <- rnorm(npilot)
failureFlag <- rbinom(npilot, size =1, prob = prop_died)
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = pval)$power
}
cur_power <- mean(rand_power)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
theta = theta,
pval = pval,
power = cur_power))
}
}
}
}
which_first <- function(x){ return(x[1])}
collect_res <- c()
power_mat[which_first(which(power_mat$n_tested == 50 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (pval in pval_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(which(power_mat$n_tested == n_tested &
power_mat$n_baseline == n_baseline &
power_mat$pval = pval &
power_mat[which_first(which(power_mat$n_tested == 100 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (pval in pval_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(which(power_mat$n_tested == n_tested &
power_mat$n_baseline == n_baseline &
power_mat$pval == pval &
power_mat$power>0.78)),])
}
}
}
collect_res
write.csv(collect_res, file = "/Users/tamarsofer/Library/CloudStorage/OneDrive-BethIsraelLaheyHealth/Grant-preparation/Oct2023_sepsis_X01/Power/20230731_power_subgroup_sepsis.csv")
library(powerSurvEpi)
# simulating a pilot dataset composed of the baseline and tested subtype
npilot <- 300
#example
prop_tested_subtype <- 0.1
prop_died <- 0.14
# covariate of interest: subtype assingment (assuming testing one subtype in comparison to others)
X1 <- rbinom(npilot, size = 1, prob = prop_tested_subtype)
# X2 is a continuous vairable
X2 <- rnorm(npilot)
failureFlag <- rbinom(npilot, size =1, prob = prop_died)
theta <- 1.01
powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = 0.05)$power
n_tested_vec <- c(100, 150, 200, 300)
n_baseline_vec <- c(500, 700, 1000)
theta_vec <- seq(1, 4, by = 0.05)
pval_vec <- c(0.05/3, 0.05/4, 0.05/5)
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (theta in theta_vec){
for (pval in pval_vec){
rand_power <- rep(NA, 10)
for (i in 1:10){
prop_tested_subtype <- n_tested/(n_tested + n_baseline)
X1 <- rbinom(npilot, size = 1, prob = prop_tested_subtype)
X2 <- rnorm(npilot)
failureFlag <- rbinom(npilot, size =1, prob = prop_died)
rand_power[i] <-  powerEpi(X1, X2, failureFlag, n= 100 + 500, theta, alpha = pval)$power
}
cur_power <- mean(rand_power)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
theta = theta,
pval = pval,
power = cur_power))
}
}
}
}
which_first <- function(x){ return(x[1])}
collect_res <- c()
power_mat[which_first(which(power_mat$n_tested == 100 & power_mat$n_baseline == 500 & power_mat$power>0.78)),]
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (pval in pval_vec){
collect_res <- rbind(collect_res,
power_mat[which_first(which(power_mat$n_tested == n_tested &
power_mat$n_baseline == n_baseline &
power_mat$pval == pval &
power_mat$power>0.78)),])
}
}
}
collect_res
write.csv(collect_res, file = "/Users/tamarsofer/Library/CloudStorage/OneDrive-BethIsraelLaheyHealth/Grant-preparation/Oct2023_sepsis_X01/Power/20230731_power_subgroup_sepsis.csv")
dat <- read.table("/Users/tamarsofer/Library/CloudStorage/OneDrive-BethIsraelLaheyHealth/Ongoing_papers/2023_parquet_db_methylation/Data/sample_bmi_methylation_v1/sample_bmi.txt")
dim(dat)
colnames(dat)
dat$tissue
dat$bmi
head(dat)
dat$platform
table(dat$platform)
head(dat)
table(dat$tissue)
library(powerMediation)
n_tested_vec <- c(100, 150, 200, 300)
n_baseline_vec <- c(500, 700, 1000)
p1_vec <- c(0.08, 0.09, 0.1, 0.11, 0.12, 0.13)
pval_vec <- c(0.05/2, 0.05/3, 0.05/4)
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (p1 in p1_vec){
for (pval in pval_vec){
p2 <- (0.14 - p1*n_baseline)/n_tested
cur_power <- powerLogisticBin(n_tested + n_baseline,
p1,
p2,
n_tested,
alpha = pval)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
p1 = p1,
p2 = p2,
pval = pval,
power = cur_power))
}
}
}
}
p1*n_baseline + p2*n_tested <- 0.14warnings()
warnings()
power_mat
n_baseline
p1
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (p1 in p1_vec){
for (pval in pval_vec){
p2 <- ((n_baseline + n_tested)*0.14 - p1*n_baseline)/n_tested
cur_power <- powerLogisticBin(n_tested + n_baseline,
p1,
p2,
n_tested,
alpha = pval)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
p1 = p1,
p2 = p2,
pval = pval,
power = cur_power))
}
}
}
}
power_mat
dim(power_mat)
power_mat[216,]
cur_power <- powerLogisticBin(n_tested + n_baseline,
p1,
p2,
n_tested,
alpha = pval)
n_tested + n_baseline
p1
p2
n_tested
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (p1 in p1_vec){
for (pval in pval_vec){
n_total <- n_baseline + n_tested)
power_mat <- c()
for (n_tested in n_tested_vec){
for (n_baseline in n_baseline_vec){
for (p1 in p1_vec){
for (pval in pval_vec){
n_total <- n_baseline + n_tested
p2 <- (n_total*0.14 - p1*n_baseline)/n_tested
cur_power <- powerLogisticBin(n_tested + n_baseline,
p1,
p2,
n_tested/n_total,
alpha = pval)
power_mat <- rbind(power_mat, data.frame(n_tested = n_tested,
n_baseline = n_baseline,
p1 = p1,
p2 = p2,
pval = pval,
power = cur_power))
}
}
}
}
power_,at
power_mat
write.table(power_mat, file = "/Users/tamarsofer/Library/CloudStorage/OneDrive-BethIsraelLaheyHealth/Grant-preparation/Oct2023_sepsis_X01/Power/20230731_power_subgroup_sepsis_survival.csv")
write.table(power_mat, file = "/Users/tamarsofer/Library/CloudStorage/OneDrive-BethIsraelLaheyHealth/Grant-preparation/Oct2023_sepsis_X01/Power/20230731_power_subgroup_sepsis_logistic.csv")
write.csv(power_mat, file = "/Users/tamarsofer/Library/CloudStorage/OneDrive-BethIsraelLaheyHealth/Grant-preparation/Oct2023_sepsis_X01/Power/20230731_power_subgroup_sepsis_logistic.csv")
(109 + 116)/1563
0.05/4
require(haven)
apoe2 <- read_sas("/Users/tamarsofer/Dropbox (Partners HealthCare)/SOL_misc_genetics/APOE/sol_inca_apoe_inv2.sas7bdat")
head(apoe2)
dim(apoe2)
table(apoe2$APOE_E2_E3_E4)
library(readr)
apoe1 <- readxl("/Users/tamarsofer/Dropbox (Partners HealthCare)/SOL_misc_genetics/APOE/HCHS_SOL_APOE.xlsx")
apoe1 <- readxl::read_excel("/Users/tamarsofer/Dropbox (Partners HealthCare)/SOL_misc_genetics/APOE/HCHS_SOL_APOE.xlsx")
head(apoe1)
head(apoe2)
dim(apoe1)
apoe_comp <- merge(apoe1, apoe2, by.x = "subject_id", by.y = "AOL_ID")
apoe_comp <- merge(apoe1, apoe2, by.x = "subject_id", by.y = "SOL_ID")
apoe_comp[1:4,]
table(apoe_comp$APOE_E2_E3_E4.x[which(apoe_comp$APOE_E2_E3_E4== 33)])
table(apoe_comp$APOE_E2_E3_E4.x[which(apoe_comp$APOE_E2_E3_E4.y == 33)])
table(apoe_comp$APOE_E2_E3_E4.x[which(apoe_comp$APOE_E2_E3_E4.y == 34)])
table(apoe_comp$APOE_E2_E3_E4.x[which(apoe_comp$APOE_E2_E3_E4.y == 44)])
table(apoe_comp$APOE_E2_E3_E4.x[which(apoe_comp$APOE_E2_E3_E4.y == 22)])
table(apoe_comp$APOE_E2_E3_E4.x[which(apoe_comp$APOE_E2_E3_E4.y == 23)])
table(apoe_comp$APOE_E2_E3_E4.x[which(apoe_comp$APOE_E2_E3_E4.y == 32)])
